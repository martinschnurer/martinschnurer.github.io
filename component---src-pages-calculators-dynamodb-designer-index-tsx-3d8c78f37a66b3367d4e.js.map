{"version":3,"sources":["webpack:///./node_modules/gatsby/node_modules/core-js/modules/es7.object.entries.js","webpack:///./src/components/calculators/DynamoDb/Table.tsx","webpack:///./src/components/calculators/DynamoDb/helpers.ts","webpack:///./src/components/calculators/DynamoDb/index.tsx","webpack:///./src/pages/calculators/dynamodb-designer/index.tsx","webpack:///./node_modules/gatsby/node_modules/core-js/modules/_object-to-array.js","webpack:///./node_modules/gatsby/node_modules/core-js/modules/es6.array.find-index.js"],"names":["$export","$entries","S","entries","it","Table","head","rows","useState","_selectedPK","setSelectedPK","selectedPK","primaryKeyIndex","secondaryKeyIndex","secondaryKeyName","findIndex","cell","pkLevel","char","str","sum","i","length","characterCountInString","dollars","dollarsLength","lastIndexOf","findSecondaryIndexInHead","times","createCharTimes","findSecondaryIndex","partitions","forEach","row","pk","rowCopy","newKeyPairs","push","filter","className","styles","tableWrapper","table","map","key","startsWith","onClick","Object","partitionKey","partitionRows","sort","a","b","localeCompare","partitionRow","rowSpan","slice","DynamoDBTool","window","localStorage","getItem","text","_setText","split","headText","rowsText","trim","rowText","dynamodb","tarea","value","onChange","e","target","setItem","stylized","DynamodbDesigner","DESCRIPTORS","getKeys","toIObject","isEnum","f","module","exports","isEntries","O","keys","result","call","$find","KEY","forced","Array","P","F","callbackfn","this","arguments","undefined"],"mappings":"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","file":"component---src-pages-calculators-dynamodb-designer-index-tsx-3d8c78f37a66b3367d4e.js","sourcesContent":["// https://github.com/tc39/proposal-object-values-entries\nvar $export = require('./_export');\nvar $entries = require('./_object-to-array')(true);\n\n$export($export.S, 'Object', {\n  entries: function entries(it) {\n    return $entries(it);\n  }\n});\n","import React, { useState } from \"react\";\nimport {\n  characterCountInString,\n  findSecondaryIndexInHead,\n  createCharTimes\n} from \"./helpers\";\nimport styles from \"./styles.module.scss\";\n\ninterface Partitions {\n  [partition: string]: string[][];\n}\n\ninterface DynamoTable {\n  head: string[];\n  rows: string[][];\n}\n\nconst Table: React.FC<DynamoTable> = ({ head, rows }) => {\n  const [_selectedPK, setSelectedPK] = useState<string | null>(null);\n\n  const selectedPK = head[0] === \"\" ? null : _selectedPK;\n\n  let primaryKeyIndex = 0;\n  let secondaryKeyIndex: number | null = null;\n  let secondaryKeyName: string | null = null;\n\n  const findSecondaryIndex = () => {\n    if (selectedPK && head[primaryKeyIndex]) {\n      const pkLevel = characterCountInString(\"#\", head[primaryKeyIndex]);\n      secondaryKeyIndex = findSecondaryIndexInHead(\n        head,\n        createCharTimes(\"$\", pkLevel)\n      );\n      secondaryKeyName = head[secondaryKeyIndex];\n      return secondaryKeyIndex;\n    }\n    return -1;\n  };\n\n  if (selectedPK) {\n    primaryKeyIndex = head.findIndex(cell => cell === selectedPK);\n    secondaryKeyIndex = findSecondaryIndex();\n  }\n\n  const partitions: Partitions = {};\n\n  // throw each row to partition\n  rows.forEach(row => {\n    const pk = row[primaryKeyIndex];\n    if (pk) {\n      let rowCopy = [...row];\n      const newKeyPairs = [rowCopy[primaryKeyIndex]];\n      if (secondaryKeyIndex > -1 && secondaryKeyIndex !== null) {\n        newKeyPairs.push(rowCopy[secondaryKeyIndex]);\n      }\n      rowCopy[primaryKeyIndex] = null;\n      rowCopy[secondaryKeyIndex] = null;\n\n      rowCopy = rowCopy.filter(cell => cell !== null);\n\n      rowCopy = [...newKeyPairs, ...rowCopy];\n\n      if (pk in partitions) {\n        partitions[pk].push(rowCopy);\n      } else {\n        partitions[pk] = [rowCopy];\n      }\n    }\n  });\n\n  // console.log(partitions);\n\n  return (\n    <>\n      <div className={styles.tableWrapper}>\n        <table className={styles.table}>\n          <thead>\n            <tr>\n              {[\n                ...(selectedPK === null ? [] : [selectedPK]),\n                ...(secondaryKeyName === null ? [] : [secondaryKeyName]),\n                ...head.filter(\n                  cell => cell !== selectedPK && cell !== secondaryKeyName\n                )\n              ].map((cell, i) => {\n                return (\n                  <th key={cell + i}>\n                    {cell.startsWith(\"#\") ? (\n                      <a onClick={() => setSelectedPK(cell)}>{cell}</a>\n                    ) : (\n                      <span>{cell}</span>\n                    )}\n                  </th>\n                );\n              })}\n            </tr>\n          </thead>\n          <tbody>\n            {Object.entries(partitions).map(([partitionKey, partitionRows]) => {\n              return partitionRows\n                .sort((a, b) => a[1] && b[1] && a[1].localeCompare(b[1]))\n                .map((partitionRow, i) => (\n                  <tr key={i}>\n                    {i === 0 && (\n                      <td rowSpan={partitionRows.length}>{partitionKey}</td>\n                    )}\n                    {partitionRow.slice(1).map((cell, i) => (\n                      <td key={cell + i}>{cell}</td>\n                    ))}\n                  </tr>\n                ));\n            })}\n          </tbody>\n        </table>\n      </div>\n    </>\n  );\n};\n\nexport default Table;\n","export const findSecondaryIndexInHead = (\n  head: string[],\n  dollars: string\n): number => {\n  const dollarsLength = dollars.length;\n  return head.findIndex(cell => cell.lastIndexOf(\"$\") === dollarsLength - 1);\n};\n\nexport const createCharTimes = (char: string, times: number) => {\n  let str = \"\";\n  for (let i = 0; i < times; i++) {\n    str += char;\n  }\n  return str;\n};\n\nexport const characterCountInString = (char: string, str: string) => {\n  let sum = 0;\n\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === char) {\n      sum++;\n    }\n  }\n\n  return sum;\n};\n","import React, { useState } from \"react\";\nimport styles from \"./styles.module.scss\";\nimport Table from \"./Table\";\n\ninterface Partitions {\n  [partition: string]: string[][];\n}\n\nconst DynamoDBTool: React.FC = () => {\n  const [text, _setText] = useState<string>(\n    typeof window !== \"undefined\"\n      ? window.localStorage.getItem(\"text\") || \"#pk, $sk\"\n      : \"\"\n  );\n\n  const [headText, ...rowsText] = text.split(\"\\n\");\n\n  const head = headText.split(\",\").map(cell => cell.trim());\n  const rows = rowsText.map(rowText =>\n    rowText.split(\",\").map(cell => cell.trim())\n  );\n\n  const setText = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const text = e.target.value;\n    _setText(text);\n    localStorage.setItem(\"text\", text);\n  };\n\n  return (\n    <div className={styles.dynamodb}>\n      <h2>DynamoDB designer tool</h2>\n      <textarea className={styles.tarea} value={text} onChange={setText} />\n      <Table head={head} rows={rows} />\n      <h3>How it works</h3>\n      <p>\n        NoSQL Workbench from AWS works really well. However, I found the process\n        of setuping up tables unnecessary hard.\n      </p>\n      <p>\n        I came with the idea, that the table and schema would be generated from\n        the text input. You can set up your primary key and other GSI indexes.\n        Also, you can click on these indexes and aggregate data into partitions.\n      </p>\n      <h3>Usage:</h3>\n      <ul>\n        <li>\n          By default <b>primary key</b> is always the first column (without any\n          sortkey).\n        </li>\n        <li>\n          Columns are always defined in the first line of the text such as \"PK,\n          SK, type\" will generate three columns with a name <i>PK</i>, <i>SK</i>{\" \"}\n          and <i>type</i>\n        </li>\n        <li>\n          Text \"#pk, $sk\" will create column - primary key with name <b>#pk</b>{\" \"}\n          and connected sort key <b>$sk</b> to this primary key\n        </li>\n        <li>\n          You can create <b>global secondary index</b> with text{\" \"}\n          <b>\"##pk2, $$sk2\"</b>. The most important part is the count of the #\n          and $, because they are matching together with the cound of these\n          characters inside the name\n        </li>\n        <li>\n          <h4>\n            Try this example: <br />\n            <small>(Copy and paste to the input above)</small>\n          </h4>\n\n          <pre className={styles.stylized}>\n            #pk, $sk, ##pk1, $$sk2, info\n            <br />\n            User-A, INFO, score, 3, Additional information\n            <br />\n            User-A, Connection\n            <br />\n            User-B, INFO, score, 4, Additional information\n            <br />\n            User-C, INFO, score, 5, Additional information\n            <br />\n            User-D, INFO, score, 1, Additional information\n            <br />\n          </pre>\n          <p>\n            Table is created with your data and indexes. Take a look at header\n            of the table. The primary key and GSI indexes are clickable. By\n            clicking on them, you activate aggregating data by this index (also\n            sort by the appropriate sort key). With this way, you can explore\n            access patterns much easier.\n            <br /> Pretty cool hah?\n          </p>\n        </li>\n      </ul>\n\n      <h3>What's missing:</h3>\n      <ul>\n        <li>Items can be sorted by sort key only by string type for now</li>\n        <li>\n          For now, it can't sort items in table by another sort key (local\n          secondary index)\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nexport default DynamoDBTool;\n","import React from \"react\";\nimport DynamoDBTool from \"../../../components/calculators/DynamoDb\";\nimport Layout from \"../../../components/layout\";\nimport { CardBox } from \"../../../components/cardbox\";\n\nconst DynamodbDesigner = () => {\n  return (\n    <Layout>\n      <CardBox>\n        <DynamoDBTool />\n      </CardBox>\n    </Layout>\n  );\n};\n\nexport default DynamodbDesigner;\n","var DESCRIPTORS = require('./_descriptors');\nvar getKeys = require('./_object-keys');\nvar toIObject = require('./_to-iobject');\nvar isEnum = require('./_object-pie').f;\nmodule.exports = function (isEntries) {\n  return function (it) {\n    var O = toIObject(it);\n    var keys = getKeys(O);\n    var length = keys.length;\n    var i = 0;\n    var result = [];\n    var key;\n    while (length > i) {\n      key = keys[i++];\n      if (!DESCRIPTORS || isEnum.call(O, key)) {\n        result.push(isEntries ? [key, O[key]] : O[key]);\n      }\n    }\n    return result;\n  };\n};\n","'use strict';\n// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)\nvar $export = require('./_export');\nvar $find = require('./_array-methods')(6);\nvar KEY = 'findIndex';\nvar forced = true;\n// Shouldn't skip holes\nif (KEY in []) Array(1)[KEY](function () { forced = false; });\n$export($export.P + $export.F * forced, 'Array', {\n  findIndex: function findIndex(callbackfn /* , that = undefined */) {\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\nrequire('./_add-to-unscopables')(KEY);\n"],"sourceRoot":""}