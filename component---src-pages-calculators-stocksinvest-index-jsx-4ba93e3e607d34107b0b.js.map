{"version":3,"sources":["webpack:///./src/pages/calculators/stocksinvest/index.jsx"],"names":["seo","title","description","roundValue","val","places","num","Math","round","StocksInvestPage","changeMonthlyInput","e","target","value","replace","commaRegex","setState","monthlyInput","changeAverageYield","averageYield","computeYear","arr","state","av","lastYear","length","myNextInput","nextBalance","balance","nextMyTotalInput","myTotalInput","nextGrow","push","grow","computeYield","i","percentFrom","smallerValue","biggerValue","render","this","className","onChange","map","obj","React","Component"],"mappings":"wMAKA,IAAMA,EAAM,CACVC,MAAO,wBACPC,YAAa,IAGTC,EAAa,SAACC,EAAKC,QAAe,IAAfA,MAAS,GAChC,IAAMC,EAAG,SAAG,GAAMD,GAClB,OAAOE,KAAKC,MAAMJ,EAAME,GAAOA,GAG3BG,E,uXACJ,aAAe,IAAD,SACZ,sBAQFC,mBAAqB,SAACC,GACpB,IAAIP,EAAMO,EAAEC,OAAOC,MACnBT,EAAMA,EAAIU,QAAQ,EAAKC,WAAY,KACnC,EAAKC,SAAS,CAAEC,aAAcb,KAZlB,EAedc,mBAAqB,SAACP,GACpB,IAAIP,EAAMO,EAAEC,OAAOC,MACnBT,EAAMA,EAAIU,QAAQ,EAAKC,WAAY,KACnC,EAAKC,SAAS,CAAEG,aAAcf,KAlBlB,EAqBdgB,YAAc,SAACC,GAAS,IAAD,EACkB,EAAKC,MAApCH,EADa,EACbA,aAAcF,EADD,EACCA,aAChBM,IAAOJ,EAAe,KAAO,IAC7BK,EAAWH,EAAIA,EAAII,OAAS,GAC5BC,EAA6B,GAAfT,EACdU,GAAeH,EAASI,QAAUF,GAAeH,EACjDM,EAAmBL,EAASM,aAAeJ,EAC3CK,EAAWJ,EAAcE,EAM/B,OALAR,EAAIW,KAAK,CACPJ,QAASzB,EAAWwB,GACpBG,aAAc3B,EAAW0B,GACzBI,KAAM9B,EAAW4B,KAEZV,GAlCK,EAqCda,aAAe,WASb,IAToB,IAAD,EACoB,EAAKZ,MAApCH,EADW,EACXA,aAAcF,EADH,EACGA,aAChBM,IAAOJ,EAAe,KAAO,IAC/BE,EAAM,CAAC,CACTO,QAASzB,EAA0B,GAAfc,EAAoBM,GACxCO,aAAc3B,EAA0B,GAAfc,GACzBgB,KAAM9B,EAA0B,GAAfc,EAAoBM,EAAoB,GAAfN,KAGnCkB,EAAI,EAAGA,EAAI,GAAIA,GAAK,EAC3Bd,EAAM,EAAKD,YAAYC,GAGzB,OAAOA,GAlDK,EAqDde,YAAc,SAACC,EAAcC,GAAf,OAA+BnC,EAA0B,IAAfkC,EAAqBC,IAnD3E,EAAKvB,WAAa,KAClB,EAAKO,MAAQ,CACXL,aAAc,IACdE,aAAc,GALJ,E,mBAuDdoB,OAAA,WAAU,IAAD,SACgCC,KAAKlB,MAApCH,EADD,EACCA,aAAcF,EADf,EACeA,aAEtB,OACE,kBAAC,IAAD,KACE,kBAAC,IACKjB,GAEN,kBAAC,IAAD,KACE,yBAAKyC,UAAU,sBAAf,qBAEE,2BAAOA,UAAU,cAAcC,SAAUF,KAAKtB,mBAAoBL,MAAOM,KAE3E,oDAEG,IACD,2BAAOsB,UAAU,cAAcC,SAAUF,KAAK9B,mBAAoBG,MAAOI,KAE3E,+BACE,+BACE,4BACE,oCACA,qCACA,qDACA,4CAGHuB,KAAKN,eAAeS,KAAI,SAACC,EAAKT,GAAN,OACvB,4BACE,4BACGA,EACA,IAFH,QAKA,4BACGS,EAAIhB,QACJ,IAFH,KAKA,4BACGgB,EAAId,aACJ,IAFH,IAIG,IACD,gCAEG,EAAKM,YAAYQ,EAAId,aAAcc,EAAIhB,SACvC,IAHH,OAOF,4BACGgB,EAAIX,KACJ,IAFH,IAIG,IACD,gCAEG,EAAKG,YAAYQ,EAAIX,KAAMW,EAAIhB,SAC/B,IAHH,e,GAhHaiB,IAAMC,WAgItBrC","file":"component---src-pages-calculators-stocksinvest-index-jsx-4ba93e3e607d34107b0b.js","sourcesContent":["import React from 'react';\nimport Layout from '../../../components/layout';\nimport SEO from '../../../components/seo';\nimport Box from '../../../components/cardbox';\n\nconst seo = {\n  title: 'Compounding over time',\n  description: '',\n};\n\nconst roundValue = (val, places = 2) => {\n  const num = 10 ** places;\n  return Math.round(val * num) / num;\n};\n\nclass StocksInvestPage extends React.Component {\n  constructor() {\n    super();\n    this.commaRegex = /,/g;\n    this.state = {\n      monthlyInput: 100,\n      averageYield: 5.00,\n    };\n  }\n\n  changeMonthlyInput = (e) => {\n    let val = e.target.value;\n    val = val.replace(this.commaRegex, '.');\n    this.setState({ monthlyInput: val });\n  }\n\n  changeAverageYield = (e) => {\n    let val = e.target.value;\n    val = val.replace(this.commaRegex, '.');\n    this.setState({ averageYield: val });\n  }\n\n  computeYear = (arr) => {\n    const { averageYield, monthlyInput } = this.state;\n    const av = (+averageYield + 100) / 100;\n    const lastYear = arr[arr.length - 1];\n    const myNextInput = monthlyInput * 12;\n    const nextBalance = (lastYear.balance + myNextInput) * av;\n    const nextMyTotalInput = lastYear.myTotalInput + myNextInput;\n    const nextGrow = nextBalance - nextMyTotalInput;\n    arr.push({\n      balance: roundValue(nextBalance),\n      myTotalInput: roundValue(nextMyTotalInput),\n      grow: roundValue(nextGrow),\n    });\n    return arr;\n  }\n\n  computeYield = () => {\n    const { averageYield, monthlyInput } = this.state;\n    const av = (+averageYield + 100) / 100;\n    let arr = [{\n      balance: roundValue(monthlyInput * 12 * av),\n      myTotalInput: roundValue(monthlyInput * 12),\n      grow: roundValue(monthlyInput * 12 * av - monthlyInput * 12),\n    }];\n\n    for (let i = 1; i < 30; i += 1) {\n      arr = this.computeYear(arr);\n    }\n\n    return arr;\n  }\n\n  percentFrom = (smallerValue, biggerValue) => roundValue(smallerValue * 100 / biggerValue);\n\n  render() {\n    const { averageYield, monthlyInput } = this.state;\n\n    return (\n      <Layout>\n        <SEO\n          {...seo}\n        />\n        <Box>\n          <div className=\"topbottom_margined\">\n            Average yield in %\n            <input className=\"margin-left\" onChange={this.changeAverageYield} value={averageYield} />\n          </div>\n          <div>\n            Monthly contribution\n            {' '}\n            <input className=\"margin-left\" onChange={this.changeMonthlyInput} value={monthlyInput} />\n          </div>\n          <table>\n            <thead>\n              <tr>\n                <th>Year</th>\n                <th>Value</th>\n                <th>My total contribution</th>\n                <th>Total Grow</th>\n              </tr>\n            </thead>\n            {this.computeYield().map((obj, i) => (\n              <tr>\n                <td>\n                  {i}\n                  {' '}\n                  Year\n                </td>\n                <td>\n                  {obj.balance}\n                  {' '}\n                  €\n                </td>\n                <td>\n                  {obj.myTotalInput}\n                  {' '}\n                  €\n                  {' '}\n                  <em>\n                    (\n                    {this.percentFrom(obj.myTotalInput, obj.balance)}\n                    {' '}\n                    %)\n                  </em>\n                </td>\n                <td>\n                  {obj.grow}\n                  {' '}\n                  €\n                  {' '}\n                  <em>\n                    (\n                    {this.percentFrom(obj.grow, obj.balance)}\n                    {' '}\n                    %)\n                  </em>\n                </td>\n              </tr>\n            ))}\n          </table>\n        </Box>\n      </Layout>\n    );\n  }\n}\n\nexport default StocksInvestPage;\n"],"sourceRoot":""}