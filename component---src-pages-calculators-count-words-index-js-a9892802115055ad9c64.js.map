{"version":3,"sources":["webpack:///./src/pages/calculators/count_words/index.js","webpack:///./node_modules/gatsby/node_modules/core-js/modules/_object-to-array.js","webpack:///./node_modules/gatsby/node_modules/core-js/modules/es7.object.entries.js"],"names":["splitRegex","roundNumber","n","Math","round","CharsHistogram","getHistogram","props","text","countWhitespaces","histogram","split","filter","ch","match","map","toLowerCase","reduce","acc","char","Object","entries","sort","a","b","render","className","styles","charsHistogram","this","entry","key","React","PureComponent","defaultProps","WordsStats","words","charCount","charsWithoutSpaces","spaces","meanLength","averageLength","fullWidth","WordRow","word","count","WordsHistogram","hideAll","setState","showAll","toggleShowAll","state","howMuchChange","e","target","value","tryParse","parseInt","isNaN","error","howMuchToShow","computeWordsHistogram","wordsCounter","w","entryA","entryB","wordHistogram","type","checked","onChange","slice","CountWordsPage","computeWords","computeAverageLength","sum","forEach","length","computeMeanLength","floor","timeoutFn","textAreaChangeHandler","clearTimeout","delayedProcessor","setTimeout","replace","withFooter","classnames","container","childrenWithShadow","title","description","keywords","textarea","DESCRIPTORS","getKeys","toIObject","isEnum","f","module","exports","isEntries","it","O","keys","i","result","call","push","$export","$entries","S"],"mappings":"2TAOA,IAKMA,EAAa,gBAEbC,EAAc,SAACC,GAAD,OAAOC,KAAKC,MAAU,IAAJF,EAAS,GAAK,KAE9CG,E,oJAWJC,aAAe,WAAO,IAAD,EACgB,EAAKC,MAAhCC,EADW,EACXA,KAAMC,EADK,EACLA,iBACVC,EAAYF,EACbG,MAAM,IACNC,QAAO,SAAAC,GAAE,OAAKA,EAAGC,MAAMd,MACvBe,KAAI,SAAAF,GAAE,OAAIA,EAAGG,iBACbC,QAAO,SAACC,EAAKC,GACV,OAAKV,GAA6B,MAATU,GAGzBD,EAAIC,GAAQA,KAAQD,EAAMA,EAAIC,GAAQ,EAAI,EACnCD,GAHEA,IAIV,IAEL,OAAOE,OACJC,QAAQX,GACRY,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAE,GAAKC,EAAE,GAAK,GAAK,M,4BAGvCC,OAAA,WAEE,OACE,yBAAKC,UAAWC,IAAOC,gBACrB,oDACA,+BACE,+BAEEC,KAAKvB,eAAeS,KAAI,SAAAe,GAAK,OAC3B,wBAAIC,IAAKD,EAAM,IACb,4BAAKA,EAAM,IACX,4BAAKA,EAAM,Y,GAzCEE,IAAMC,eAA7B5B,EAOG6B,aAAe,CACpBzB,kBAAkB,GA4CtB,IAAM0B,EAAa,SAAC,GAOb,IAAD,IANJC,aAMI,MANI,EAMJ,MALJC,iBAKI,MALQ,EAKR,MAJJC,0BAII,MAJiB,EAIjB,MAHJC,cAGI,MAHK,EAGL,MAFJC,kBAEI,MAFS,EAET,MADJC,qBACI,MADY,EACZ,EACJ,OACE,yBAAKf,UAAWC,IAAOe,WACrB,qCACA,+BACE,+BACE,4BAAI,qCAAc,4BAAKN,IACvB,4BAAI,wDAAiC,4BAAKC,IAC1C,4BAAI,2DAAoC,4BAAKC,IAC7C,4BAAI,sCAAe,4BAAKC,IACxB,4BAAI,mDAA4B,4BAAKtC,EAAYwC,KACjD,4BAAI,gDAAyB,4BAAKxC,EAAYuC,SAOlDG,EAAU,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAMC,EAAR,EAAQA,MAAR,OACd,4BACE,4BAAKD,GACL,4BAAKC,KAIHC,E,YACJ,aAAe,IAAD,SACZ,sBAYFC,QAAU,kBAAM,EAAKC,SAAS,CAAEC,SAAS,KAb3B,EAcdA,QAAU,kBAAM,EAAKD,SAAS,CAAEC,SAAS,KAd3B,EAedC,cAAgB,kBAAM,EAAKF,SAAS,CAAEC,SAAU,EAAKE,MAAMF,WAf7C,EAgBdG,cAAgB,SAACC,GACQ,KAAnBA,EAAEC,OAAOC,QACXF,EAAEC,OAAOC,MAAQ,GAEnB,IAAMC,EAAWC,SAASJ,EAAEC,OAAOC,OAC/BG,MAAMF,GACR,EAAKR,SAAS,CAAEW,MAAO,iDAEvB,EAAKX,SAAS,CACZW,MAAO,KACPC,cAAeJ,KA1BP,EA+BdK,sBAAwB,WACtB,IAEMC,EAFQ,EAAKvD,MAAM6B,MACKrB,KAAI,SAAAgD,GAAC,OAAIA,EAAE/C,iBACJC,QAAO,SAACC,EAAK0B,GAEhD,OADA1B,EAAI0B,GAASA,KAAQ1B,EAAOA,EAAI0B,GAAQ,EAAI,EACrC1B,IACN,IAMH,OAHEE,OAAOC,QAAQyC,GACdxC,MAAK,SAAC0C,EAAQC,GAAT,OAAoBD,EAAO,GAAKC,EAAO,GAAK,GAAK,MAvCzD,EAAKd,MAAQ,CACXS,cAAe,GACfX,SAAS,EACTU,MAAO,MALG,E,0BA8CdlC,OAAA,WACE,OACE,yBAAKC,UAAWC,IAAOuC,eACrB,+CACA,uCACE,2BACEC,KAAK,WACLzC,UAAU,cACV0C,QAASvC,KAAKsB,MAAMF,QACpBoB,SAAUxC,KAAKqB,kBAGjBrB,KAAKsB,MAAMF,SACX,uDACC,2BACGvB,UAAU,cACVyC,KAAK,SACLE,SAAUxC,KAAKuB,cACfG,MAAoC,IAA7B1B,KAAKsB,MAAMS,cAAsB,GAAK/B,KAAKsB,MAAMS,iBAI9D,+BACE,+BACE,4BACE,4BAAI,oCAAgB,4BAAI,uCAG5B,+BAEI/B,KAAKgC,wBACJS,MAAM,EAAGzC,KAAKsB,MAAMS,eACpB7C,KAAI,gBAAE6B,EAAF,KAAQC,EAAR,YAAmB,kBAACF,EAAD,CAASC,KAAMA,EAAMC,MAAOA,EAAOd,IAAKa,W,GA/EjDZ,IAAMC,eAwF7BsC,E,YACJ,aAAe,IAAD,SACZ,sBAOFC,aAAe,SAAAhE,GAAI,OACjBA,EAAKG,MAAMX,GAAYY,QAAO,SAAAgC,GAAI,MAAa,KAATA,GAAwB,MAATA,MATzC,EAWd6B,qBAAuB,WACrB,IAAMrC,EAAQ,EAAKe,MAAMf,MACrBsC,EAAM,EAEV,OADAtC,EAAMuC,SAAQ,SAAA/B,GAAI,OAAI8B,GAAO9B,EAAKgC,UACV,IAAjBxC,EAAMwC,OAAe,EAAIF,EAAMtC,EAAMwC,QAfhC,EAkBdC,kBAAoB,WAClB,IAAIzC,EAAQ,EAAKe,MAAMf,MAAMkC,QAC7B,OAAqB,IAAjBlC,EAAMwC,OACD,GAETxC,EAAQA,EAAMd,MAAK,SAACC,EAAEC,GAAH,OAASD,EAAEqD,OAASpD,EAAEoD,QAAU,EAAI,MAC1CzE,KAAK2E,MAAM1C,EAAMwC,OAAS,IAAIA,QAxB/B,EA2BdG,UAAY,SAACvE,GACX,EAAKwC,SAAS,CACVZ,MAAO,EAAKoC,aAAahE,MA7BjB,EAiCdwE,sBAAwB,SAAC3B,GAAO,IACtBE,EAAUF,EAAEC,OAAZC,MAGR0B,aAAa,EAAKC,kBAGlB,EAAKA,iBAAmBC,YAAW,kBAAM,EAAKJ,UAAUxB,KAAQ,GAEhE,EAAKP,SAAS,CACZxC,KAAM+C,KA3CI,EA+CdjB,mBAAqB,SAAC9B,GAEpB,OADgBA,EAAK4E,QAAQ,MAAO,IACrBR,QA/Cf,EAAKzB,MAAQ,CACX3C,KAAM,GACN4B,MAAO,IAJG,E,0BAoDdX,OAAA,WACE,IAAMa,EAAqBT,KAAKS,mBAAmBT,KAAKsB,MAAM3C,MAC9D,OACE,kBAAC,IAAD,CAAQ6E,YAAY,GAClB,yBAAK3D,UAAW4D,IAAW3D,IAAO4D,UAAW5D,IAAO6D,qBAClD,kBAAC,IAAD,CACEC,MAAO,gBACPC,YAjPK,oIAkPLC,SAAU,CAAC,QAAS,UAAW,eAEjC,yBAAKjE,UAAWC,IAAOe,WACrB,uDACA,8BAAUhB,UAAWC,IAAOiE,SAAUvB,SAAUxC,KAAKmD,yBAEvD,yBAAKtD,UAAWC,IAAOe,WAAW,qCAAlC,IAAiDb,KAAKsB,MAAMf,MAAMwC,QAClE,kBAACzC,EAAD,CACEC,MAAOP,KAAKsB,MAAMf,MAAMwC,OACxBvC,UAAWR,KAAKsB,MAAM3C,KAAKoE,OAC3BtC,mBAAoBA,EACpBC,OAAQV,KAAKsB,MAAM3C,KAAKoE,OAAStC,EACjCG,cAAeZ,KAAK4C,uBACpBjC,WAAYX,KAAKgD,sBAEnB,kBAAC/B,EAAD,CAAgBV,MAAOP,KAAKsB,MAAMf,QAClC,kBAAC/B,EAAD,CAAgBG,KAAMqB,KAAKsB,MAAM3C,U,GA7EdwB,IAAMC,eAoFpBsC,a,oBChRf,IAAIsB,EAAc,EAAQ,IACtBC,EAAU,EAAQ,IAClBC,EAAY,EAAQ,IACpBC,EAAS,EAAQ,IAAiBC,EACtCC,EAAOC,QAAU,SAAUC,GACzB,OAAO,SAAUC,GAOf,IANA,IAKItE,EALAuE,EAAIP,EAAUM,GACdE,EAAOT,EAAQQ,GACf1B,EAAS2B,EAAK3B,OACd4B,EAAI,EACJC,EAAS,GAEN7B,EAAS4B,GACdzE,EAAMwE,EAAKC,KACNX,IAAeG,EAAOU,KAAKJ,EAAGvE,IACjC0E,EAAOE,KAAKP,EAAY,CAACrE,EAAKuE,EAAEvE,IAAQuE,EAAEvE,IAG9C,OAAO0E,K,oBCjBX,IAAIG,EAAU,EAAQ,GAClBC,EAAW,EAAQ,IAAR,EAA8B,GAE7CD,EAAQA,EAAQE,EAAG,SAAU,CAC3BzF,QAAS,SAAiBgF,GACxB,OAAOQ,EAASR","file":"component---src-pages-calculators-count-words-index-js-a9892802115055ad9c64.js","sourcesContent":["import React from \"react\";\nimport PT from \"prop-types\";\nimport Layout from '../../../components/layout'\nimport SEO from \"../../../components/seo\"\nimport classnames from \"classnames\";\nimport styles from \"./styles.module.scss\"\n\nconst description = `\nWords counter from your text. Words and characters histogram calculator.\nInteractive free online words counter. Try it now! \n`\n\nconst splitRegex = /[\\s.?!:,();]+/;\n\nconst roundNumber = (n) => Math.round(n * 100, 2) / 100;\n\nclass CharsHistogram extends React.PureComponent {\n  \n  static propTypes = {\n    text: PT.string.isRequired,\n    countWhitespaces: PT.bool,\n  }\n\n  static defaultProps = {\n    countWhitespaces: false,\n  }\n\n  getHistogram = () => {\n    const { text, countWhitespaces } = this.props;\n    let histogram = text\n      .split('')\n      .filter(ch => !ch.match(splitRegex))\n      .map(ch => ch.toLowerCase())\n      .reduce((acc, char) => {\n          if (!countWhitespaces && char === \" \") {\n            return acc;\n          }\n          acc[char] = char in acc ? acc[char] + 1 : 1;\n          return acc;\n      }, {});\n  \n    return Object\n      .entries(histogram)\n      .sort((a, b) => a[1] < b[1] ? 1 : -1)\n  }\n\n  render() {\n    \n    return (\n      <div className={styles.charsHistogram}>\n        <h2>Characters histogram</h2>\n        <table>\n          <tbody>\n          {\n            this.getHistogram().map(entry => (\n              <tr key={entry[0]}>\n                <td>{entry[0]}</td>\n                <td>{entry[1]}</td>\n              </tr>\n            ))\n          }\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n}\n\nconst WordsStats = ({\n  words = 0,\n  charCount = 0, \n  charsWithoutSpaces = 0,\n  spaces = 0,\n  meanLength = 0,\n  averageLength = 0,\n}) => {\n  return (\n    <div className={styles.fullWidth}>\n      <h2>Stats</h2>\n      <table>\n        <tbody>\n          <tr><td>Words</td><td>{words}</td></tr>\n          <tr><td>Characters (With Spaces)</td><td>{charCount}</td></tr>\n          <tr><td>Characters (Without Spaces)</td><td>{charsWithoutSpaces}</td></tr>\n          <tr><td>Spaces</td><td>{spaces}</td></tr>\n          <tr><td>Average word length</td><td>{roundNumber(averageLength)}</td></tr>\n          <tr><td>Mean word length</td><td>{roundNumber(meanLength)}</td></tr>\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nconst WordRow = ({word, count}) => (\n  <tr>\n    <td>{word}</td>\n    <td>{count}</td>\n  </tr>\n);\n\nclass WordsHistogram extends React.PureComponent {\n  constructor() {\n    super();\n    this.state = {\n      howMuchToShow: 50,\n      showAll: false,\n      error: null,\n    };\n  }\n\n  static propTypes = {\n    words: PT.arrayOf(PT.string).isRequired,\n  }\n\n  hideAll = () => this.setState({ showAll: false });\n  showAll = () => this.setState({ showAll: true });\n  toggleShowAll = () => this.setState({ showAll: !this.state.showAll });\n  howMuchChange = (e) => {\n    if (e.target.value === \"\") {\n      e.target.value = 0;\n    }\n    const tryParse = parseInt(e.target.value)\n    if (isNaN(tryParse)) {\n      this.setState({ error: 'Set positive natural number (for example 50)'})\n    } else {\n      this.setState({\n        error: null,\n        howMuchToShow: tryParse,\n      })\n    }\n  };\n\n  computeWordsHistogram = () => {\n    const words = this.props.words;\n    const lowercasedWords = words.map(w => w.toLowerCase())\n    const wordsCounter = lowercasedWords.reduce((acc, word) => {\n      acc[word] = (word in acc) ? acc[word] + 1 : 1;\n      return acc;\n    }, {});\n    \n    const sortedWordsHistogram = \n      Object.entries(wordsCounter)\n      .sort((entryA, entryB) => entryA[1] < entryB[1] ? 1 : -1)\n\n    return sortedWordsHistogram;\n  }\n\n  render() {\n    return (\n      <div className={styles.wordHistogram}>\n        <h2>Words Histogram</h2>\n        <div>ShowAll \n          <input \n            type=\"checkbox\" \n            className=\"margin-left\"\n            checked={this.state.showAll}\n            onChange={this.toggleShowAll}\n          />\n        </div>\n        {!this.state.showAll && (\n          <div>How much words to show? \n           <input\n              className=\"margin-left\"\n              type=\"number\" \n              onChange={this.howMuchChange}\n              value={this.state.howMuchToShow === 0 ? \"\" : this.state.howMuchToShow}\n           />\n          </div>\n        )}\n        <table>\n          <thead>\n            <tr>\n              <th><b>Word</b></th><th><b>Count</b></th>\n            </tr>\n          </thead>\n          <tbody>\n          {\n              this.computeWordsHistogram()\n              .slice(0, this.state.howMuchToShow)\n              .map(([word, count]) => <WordRow word={word} count={count} key={word} />)\n          }\n          </tbody>\n        </table>\n      </div>\n      )\n    };\n} \n\nclass CountWordsPage extends React.PureComponent {\n  constructor() {\n    super();\n    this.state = {\n      text: \"\",\n      words: [],\n    }\n  }\n\n  computeWords = text => \n    text.split(splitRegex).filter(word => word !== \"\" && word !== \" \");\n  \n  computeAverageLength = () => {\n    const words = this.state.words;\n    let sum = 0;\n    words.forEach(word => sum += word.length);\n    return words.length === 0 ? 0 : sum / words.length;\n  }\n  \n  computeMeanLength = () => {\n    let words = this.state.words.slice();\n    if (words.length === 0) {\n      return 0;\n    }\n    words = words.sort((a,b) => a.length < b.length ? -1 : 1)\n    return words[Math.floor(words.length / 2)].length;\n  }\n\n  timeoutFn = (text) => {\n    this.setState({\n        words: this.computeWords(text),\n    });\n  };\n\n  textAreaChangeHandler = (e) => {\n    const { value } = e.target;\n\n    // delete previous processor\n    clearTimeout(this.delayedProcessor);\n\n    // create new\n    this.delayedProcessor = setTimeout(() => this.timeoutFn(value), 2);\n\n    this.setState({\n      text: value,\n    })\n  };\n\n  charsWithoutSpaces = (text) => {\n    const newText = text.replace(/\\s/g, '')\n    return newText.length\n  }\n\n  render() {\n    const charsWithoutSpaces = this.charsWithoutSpaces(this.state.text)\n    return (\n      <Layout withFooter={false}>\n        <div className={classnames(styles.container, styles.childrenWithShadow)}>\n          <SEO\n            title={\"Words Counter\"}\n            description={description}\n            keywords={[\"words\", \"counter\", \"histogram\"]}\n          />\n          <div className={styles.fullWidth}>\n            <div>Paste Your Text Below:</div>\n            <textarea className={styles.textarea} onChange={this.textAreaChangeHandler} />\n          </div>\n          <div className={styles.fullWidth}><b>Words:</b> {this.state.words.length}</div>\n          <WordsStats\n            words={this.state.words.length}\n            charCount={this.state.text.length}\n            charsWithoutSpaces={charsWithoutSpaces}\n            spaces={this.state.text.length - charsWithoutSpaces}\n            averageLength={this.computeAverageLength()}\n            meanLength={this.computeMeanLength()}\n          />\n          <WordsHistogram words={this.state.words} />\n          <CharsHistogram text={this.state.text} />\n        </div>\n      </Layout>\n    );\n  }\n }\n\nexport default CountWordsPage;\n","var DESCRIPTORS = require('./_descriptors');\nvar getKeys = require('./_object-keys');\nvar toIObject = require('./_to-iobject');\nvar isEnum = require('./_object-pie').f;\nmodule.exports = function (isEntries) {\n  return function (it) {\n    var O = toIObject(it);\n    var keys = getKeys(O);\n    var length = keys.length;\n    var i = 0;\n    var result = [];\n    var key;\n    while (length > i) {\n      key = keys[i++];\n      if (!DESCRIPTORS || isEnum.call(O, key)) {\n        result.push(isEntries ? [key, O[key]] : O[key]);\n      }\n    }\n    return result;\n  };\n};\n","// https://github.com/tc39/proposal-object-values-entries\nvar $export = require('./_export');\nvar $entries = require('./_object-to-array')(true);\n\n$export($export.S, 'Object', {\n  entries: function entries(it) {\n    return $entries(it);\n  }\n});\n"],"sourceRoot":""}