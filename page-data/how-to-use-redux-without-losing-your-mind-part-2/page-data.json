{"componentChunkName":"component---src-templates-blog-post-jsx","path":"/how-to-use-redux-without-losing-your-mind-part-2/","result":{"data":{"site":{"siteMetadata":{"title":"Martin Schnürer","author":"Martin Schnürer"}},"markdownRemark":{"id":"7f061b48-4538-5baa-9af4-e83b471f0954","excerpt":"In the last part How To Use Redux Without Losing Your Mind I’ve presented the new way of using redux libary. The main reason behind implementing a custom way of…","html":"<p>In the last part <a href=\"/how-to-use-redux-without-losing-mind\">How To Use Redux Without Losing Your Mind</a> I’ve presented the new way of using redux libary.</p>\n<p>The main reason behind implementing a custom way of using Redux was the endless writing a code of action creators, action types, extracting them to separate files, writing one reducer with huge switch cases - I was so tired with writing that type of code and I wanted to finally simplify it. In the first part, I wrote about how it’s possible to write much less code with the same result. I am successfully using it in my own project - and no, it’s not a simple TO-DO list with a few actions. It is a huge application with hundreds of endpoints and “global” state attributes in redux - which had to be set. With that approach, I had zero problems and development felt much faster.</p>\n<p>In the end - You want just <em>setState</em> and you just want your application to depends on your state. Just like in your simple react component.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Comp</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Well, maybe I said that but: simplicity and no more useless code! I just want to set that freaking state.</strong></p>\n<p>I am so glad I don’t have to write different actions and action creators for fetching states:</p>\n<ul>\n<li><strong>FETCH_START</strong></li>\n<li><strong>FETCH_DONE</strong></li>\n<li><strong>FETCH_ERR</strong></li>\n<li>…\nand other stupid things, this is just… a lot of code to bother with.</li>\n</ul>\n<p>However, when your application grows and you want to keep your code separated, or different components need to communicate with each other, then it’s a good idea to use global state management library - such as Redux. Nowadays, you can use Context. But I found Context to rerender a lot and it is a lot harder to optimize components within Context. With Redux, you can easily optimize selection of attributes from global state if you need. For such things, it is good to use selectors from library <em>reselect</em>. </p>\n<p><em>Note: If you application is small and your global state isn’t changed too often, then Context is in my opinion right for you - otherwise, use Redux</em></p>\n<h1>Enhancement of the previous solution</h1>\n<p>In the last part, I presented the solution where the value of the reducer was simply set within a function, such as this:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> update <span class=\"token keyword\">from</span> <span class=\"token string\">\"immutability-helper\"</span><span class=\"token punctuation\">;</span>\n  \n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> postsState <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nnewState <span class=\"token operator\">=</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>newState<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  fetch<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    loading<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      $<span class=\"token keyword\">set</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">setPostsState</span><span class=\"token punctuation\">(</span>newState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>function setPostsState is doing everything for us. Dispatch a setting function for the reducer. However, this one got one disadvantage. If between line where store.getState and setPostsState happened something, where state was changed, we would run into race condition - we would overwrite new state with the old state values. So I came with the new idea, where you don’t have to getting state anymore.</p>\n<p>Now you can write the action like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> update <span class=\"token keyword\">from</span> <span class=\"token string\">\"immutability-helper\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">setPostsState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">oldState</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// returning the new state</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>oldState<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    fetch<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      loading<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        $<span class=\"token keyword\">set</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And how the reducer was changed? Not much.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">  <span class=\"token comment\">// reducer.ts</span>\n\n  <span class=\"token keyword\">const</span> defaultState<span class=\"token punctuation\">:</span> PostsState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    posts<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    fetch<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      error<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n      loading<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">postsReducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">:</span> PostsState <span class=\"token operator\">=</span> defaultState<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">:</span> PostsActions</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">\"SET_POSTS_STATE\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> action<span class=\"token punctuation\">.</span><span class=\"token function\">payload</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// instead of return action.payload;</span>\n      <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Not very different from previous version. But now, we are depending on the state value provided by reducer itself. In the payload is the function that we send within our action <code class=\"language-text\">setPostsState</code>. This function gets into the reducer. Reducer passed actual state inside the function and function just did it job and returned new state which was finally set by reducer. </p>\n<p>With typescript, it is much safer to do these type of operations because this passed function MUST always return valid <em>PostsState</em> type. </p>\n<h1>Conclusion</h1>\n<p>You don’t have to keep align with official redux guide. In my opinion, official approach requires a lot more code to be written - which is often unnecessary. My recommendation is, if you understand how redux works, try to play with it a little bit and find a way which works for you. I figured my own way which works in my application without problem. The development is a lot faster, reduces code and complexity.</p>","frontmatter":{"title":"How To Use Redux Without Losing Your Mind - Part II","date":"January 02, 2020","categories":["programming"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/how-to-use-redux-without-losing-your-mind-part-2/","previous":{"excerpt":"TLDR; You can use redux without a lot of boilerplate with just one action changing the whole reducer state. Consistency of the structure can…","fields":{"slug":"/how-to-use-redux-without-losing-mind/"},"frontmatter":{"date":"November 19, 2019","title":"How To Use Redux Without Losing Your Mind","publish":null,"categories":["programming"],"tags":["react","redux","programming"]}},"next":{"excerpt":"GatsbyJS is framework for generating static webpages written in React and GraphQL. In this post I’m going to tell you why I think GatsbyJS…","fields":{"slug":"/this-is-why-i-love-gatsby-js/"},"frontmatter":{"date":"January 28, 2020","title":"This is why I love Gatsby JS","publish":null,"categories":["programming"],"tags":["gatsby","static","programming"]}}}}}