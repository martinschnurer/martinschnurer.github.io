{"componentChunkName":"component---src-templates-blog-post-jsx","path":"/how-to-use-redux-without-losing-mind/","result":{"data":{"site":{"siteMetadata":{"title":"Martin Schnürer","author":"Martin Schnürer"}},"markdownRemark":{"id":"235cb067-f930-5652-9b6c-367190da87d1","excerpt":"TLDR; You can use redux without a lot of boilerplate with just one action changing the whole reducer state. Consistency of the structure can be reached with…","html":"<p><strong><em>TLDR; You can use redux without a lot of boilerplate with just one action changing the whole reducer state. Consistency of the structure can be reached with immutable-helper and typescript.</em></strong></p>\n<div class=\"warning\">\nThis is just my opinion and my work-flow with redux library. I don't say it is the best way for using it - every framework and the way of using brings its pros and cons.\n</div>\n<p>For establishing this work-flow you will need:</p>\n<ul>\n<li>React with typescript</li>\n<li>Redux</li>\n<li><em>immutability-helper</em> npm package</li>\n</ul>\n<p>Okay so you probably know redux and what it is used for. A global state - one source of truth. When it is changed, appropriate components get rerendered with a new data from the store. This is used mainly to avoid passing handlers and data back and forth between components and their parents.</p>\n<p>There are an <strong>actions</strong>, <strong>reducers</strong> and the <strong>store</strong>. React components should dispatch actions to store. Then redux finds appropriate reducer to handle the action by its type. Then new state is returned from reducer and store will notify all components to rerender.</p>\n<p><img src=\"/178f72c22f0a4153c2e0990d3fce95fa/Frame30.svg\" alt=\"diagram shows how redux works with react\"></p>\n<p>If you have ever worked with redux you have always end up with a structure similar to this.</p>\n<p><img src=\"/3e33552c361d76b05335f61eea33b56d/Frame31.svg\" alt=\"diagram of how according to docs should be actions mapped on reducers\"></p>\n<p>Every action has its own case handler inside switch in a reducer. Like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> defaultState<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> ActionType<span class=\"token punctuation\">.</span><span class=\"token constant\">LOAD_POSTS_REQUEST</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n          posts<span class=\"token punctuation\">:</span> action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">case</span> ActionType<span class=\"token punctuation\">.</span><span class=\"token constant\">LOAD_POSTS_REQUST_SUCC</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n          somethings<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">case</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n          somethings<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span> \n        <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Sometimes, if your state is a little bit nested and if you want to change one attribute inside nested structure, you end up doing this maybe:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">  <span class=\"token keyword\">case</span> ActionType<span class=\"token punctuation\">.</span><span class=\"token constant\">UPDATE_SOMETHING_NESTED</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n      some_attr<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>state<span class=\"token punctuation\">.</span>some_attr<span class=\"token punctuation\">,</span>\n        another_nested<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token operator\">...</span>state<span class=\"token punctuation\">.</span>some_attr<span class=\"token punctuation\">.</span>another_nested<span class=\"token punctuation\">,</span>\n          a<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>You can’t just do <code class=\"language-text\">state.some_attr.another_nested.a = 3;</code>, you want to keep your data immutable and you want to have different reference for the structures, that has changed. As you can see, if you do immutability here with vanilla options, your code starts to looks like the one above or even worse. Trust me, you don’t want this. We get to this problem later with our <em>immutability-helper</em></p>\n<h1>What is wrong with this approach</h1>\n<p>A lot of boilerplate code for me. I didn’t like this approach from the first moment I have started using it. A code always ended up with a few hundred of lines and I started to get lost inside my own code.</p>\n<p>A good practice is also keeping a file named <code class=\"language-text\">ActionTypes</code> where you have your action types stored and then you would use them over your actions and reducers as variables.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">  <span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">FETCH_ALL_POSTS</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"FETCH_ALL_POSTS\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">FETCH_ALL_POSTS_SUCC</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"FETCH_ALL_POSTS_SUCC\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">FETCH_ALL_POSTS_ERR</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"FETCH_ALL_POSTS_ERR\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ... and so on and so on</span></code></pre></div>\n<p>What I ended up was a big unnecessary file with a lot of these types. Do you know where I did a lot of bugs? When CTRL+C and CTRL+V these types and forget to change a string. So I ended up searching for bug for a next 30 minutes.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">  <span class=\"token comment\">// EASY TO MAKE A MISTAKE</span>\n  <span class=\"token comment\">// SEE THE THIRD FETCH_ALL_POSTS_ERR</span>\n\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">FETCH_ALL_POSTS</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"FETCH_ALL_POSTS\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">FETCH_ALL_POSTS_SUCC</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"FETCH_ALL_POSTS_SUCC\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">FETCH_ALL_POSTS_ERR</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"FETCH_ALL_POSTS_SUCC\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &lt;-- DO YOU SEE THAT SUCC ??? :)</span></code></pre></div>\n<p>Then there is so called action creators. Action creators are functions, that create an object (Action) for you:\nSuch as this:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">  <span class=\"token comment\">// Again copying all </span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchAllPostsActionCreator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">type</span><span class=\"token punctuation\">:</span> ActionTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">FETCH_ALL_POSTS</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchAllPostsSuccActionCreator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">payload</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">type</span><span class=\"token punctuation\">:</span> ActionTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">FETCH_ALL_POSTS_SUCC</span><span class=\"token punctuation\">,</span>\n    payload<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchAllPostsErrActionCreator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">type</span><span class=\"token punctuation\">:</span> ActionTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">FETCH_ALL_POSTS_ERR</span><span class=\"token punctuation\">,</span>\n    error<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Do you like that long function namings? I don’t like them. We use action creators because we do not want to create an action objects by hand - so we can’t forget what ActionType has to go there or what name of payload and other attributes and so on. The thought behind it is OK.</p>\n<p>But, do you see how many code is being generated, and we didn’t do anything yet. But we do it for safety and consistency, testability and other things some manager/team leader wants right?</p>\n<p>So disadvantages for me was:</p>\n<ul>\n<li>A lot of useless code being generated</li>\n<li>copy+paste mistakes, hard to find these bugs</li>\n<li>small flexibility, you need to work with existing actions/actionCreators or make another few and generate a few hundreds of code</li>\n<li>I’m not sure about this one, but as I know, if you dispatch some action to the store then redux must iterate over all reducers and find appropriate reducer-switch-case for this one of type function. So when you start to have like 200-300 different reducer-cases, then redux needs to iterate over every these reducers and every switch case which exists on every dispatch that happens. This can lead to slower response as application gets bigger.</li>\n</ul>\n<h1>Solution</h1>\n<p>Have only one reducer switch case and set state from an action.</p>\n<p><img src=\"/184dca16c9c1097b558b868ef1636bc3/Frame32.svg\" alt=\"new implementation only one to one action to reducer mapping\"></p>\n<p><img src=\"/53c8bb60ed7d03c346bdd2f88d00e65a/Frame33.svg\" alt=\"Other functions interacting with action\"></p>\n<p>I strongly recommend using Typescript here.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// actions.ts</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setPostsState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newState<span class=\"token punctuation\">:</span> PostsState</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  action<span class=\"token punctuation\">:</span> <span class=\"token string\">\"SET_POSTS_STATE\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Only one action type for this reducer</span>\n  payload<span class=\"token punctuation\">:</span> newState<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Noticed how I wrapped this function with <code class=\"language-text\">store.dispatch</code> ? I did it because I wanted an action to be really the action in the real sense of meaning. When I want to setPostsState, I really want to set the fu*king state. I don’t want action type, I don’t want action creator, I don’t want an object… I just want to set store state and move on with things. </p>\n<p>With this, I don’t have to wrap it like this <code class=\"language-text\">store.dispatch(SetPostsStateAction)</code> … I ended up in a lot of cases where my store just didn’t updated because I called action creator without dispatch and so on. So I kept it simple and had dispatch function included in this one. Simple.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">  <span class=\"token comment\">// reducer.ts</span>\n\n  <span class=\"token keyword\">const</span> defaultState<span class=\"token punctuation\">:</span> PostsState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    posts<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    fetch<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      error<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n      loading<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">postsReducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">:</span> PostsState <span class=\"token operator\">=</span> defaultState<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">:</span> PostsActions</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">\"SET_POSTS_STATE\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Advantages:</p>\n<ul>\n<li>No boilerplate, less code</li>\n<li>Only one action for one reducer, one access point - Faster than 300 iteration reducer-switch-cases</li>\n<li>Flexible, every component or function can just set what it needs</li>\n<li>(With typescript, it is safe to change state from anywhere in the app)</li>\n</ul>\n<h1>Immutability-helper</h1>\n<p>Immutability-helper is package that can updates nested structure. When structure is updated a new immutable object with a new reference is returned. Only structures that really have changed have different reference. Then redux can easily does a reference comparison and knows whether something has changed or not. Syntax is at the beggining a little weird, but when you get used to, you will not want to set immutable state differently.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">  <span class=\"token keyword\">import</span> update <span class=\"token keyword\">from</span> <span class=\"token string\">\"immutability-helper\"</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> postsState <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  newState <span class=\"token operator\">=</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>newState<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    fetch<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      loading<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        $<span class=\"token keyword\">set</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// now we can use our set state function</span>\n  <span class=\"token function\">setPostsState</span><span class=\"token punctuation\">(</span>newState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>One more thing: You can do this safely from anywhere from your code. One disadvantage is, that when type of the posts state will change, you need eventually update every access setting point in your app. If for some reason will be <em>loading</em> inside state object renamed to <em>loadingRequest</em>, you need to update it everywhere and typescript doesn’t let you compile your code.</p>\n<p>You can’t see a real advantage here because our state is too small. But when your state starts to have more attributes and these attributes are nested. Trust me, you won’t heard a word against it.</p>\n<p>If you see some misunderstaning, error, mistake, grammar mistake or just have a question then I would be more than pleased if you would write a comment below. Thank you.</p>","frontmatter":{"title":"How To Use Redux Without Losing Your Mind","date":"November 19, 2019","categories":["programming"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/how-to-use-redux-without-losing-mind/","previous":{"excerpt":"TLDR; You can implement your own email subscription service (almost) for free. In this post, I’m going to implement one and tell you more…","fields":{"slug":"/newsletter-subscribe-endpoint-for-your-gatsby-site/"},"frontmatter":{"date":"November 05, 2019","title":"Implementing Newsletter Subscription for your Gatsby Website","publish":null,"categories":["programming"],"tags":["serverless","newsletter","lambda","dynamodb","gatsbyjs"]}},"next":null}}}