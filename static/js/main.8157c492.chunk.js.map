{"version":3,"sources":["Containers/Menu/index.jsx","routes.jsx","serviceWorker.js","index.js"],"names":["linkStyle","color","LinkTo","_ref","to","children","react_default","a","createElement","Link","style","rowMenuStyle","height","colAlignCenter","display","alignItems","span4","span","StyledCol","_ref2","_ref2$xs","xs","_ref2$sm","sm","_ref2$style","props","Object","objectWithoutProperties","Col","assign","className","Menu","Container","fluid","backgroundColor","Row","Menu_StyledCol","offset","Menu_LinkTo","React","Component","DynamicNotFound","Loadable","loader","__webpack_require__","e","then","bind","loading","DynamicBlog","DynamicMainPage","MainRouter","HashRouter","Switch","Route","path","Fragment","Containers_Menu","exact","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactGA","initialize","pageview","pathname","search","ReactDOM","render","routes","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8157c492.chunk.js","sourcesContent":["import React from 'react'\nimport { Container, Row, Col } from 'react-bootstrap' \nimport { Link } from 'react-router-dom'\n\nconst linkStyle = {\n   'color': 'white',\n}\n\nconst LinkTo = ({to, children}) => (\n   <Link to={to} style={linkStyle}>{children}</Link>\n)\n\nconst rowMenuStyle = {\n   height: 50\n}\n\nconst colAlignCenter = {\n   display: 'flex',\n   alignItems: 'center'\n}\n\nconst span4 = {span: 4}\n\nconst StyledCol = ({xs=span4, sm=3, style=colAlignCenter, children, ...props}) => (\n   <Col className=\"d-flex justify-content-center\" xs={xs} sm={sm} style={style} {...props}>{children}</Col>\n)\n\nclass Menu extends React.Component {\n   render() {\n      return (\n         <Container fluid style={{ backgroundColor: 'black', color: 'white' }}>\n            <Container>\n               <Row style={rowMenuStyle} className=\"text-center\">\n                  <StyledCol sm={{span: 3, offset: 2}}>\n                     <LinkTo to=\"/\">Home</LinkTo>\n                  </StyledCol>\n                  <StyledCol><LinkTo to='/calculators'>Calculators</LinkTo></StyledCol>\n                  <StyledCol><LinkTo to='/blog'>Blog</LinkTo></StyledCol>\n               </Row>\n            </Container>\n         </Container>\n      )\n   }\n}\n\nexport default Menu","import React from 'react'\nimport { HashRouter, Switch, Route } from 'react-router-dom'\nimport Loadable from 'react-loadable'\nimport Menu from './Containers/Menu'\n\nconst DynamicNotFound = Loadable({\n   loader: () => import('./Containers/NotFound'),\n   loading: () => <div>Loading</div>\n})\n\nconst DynamicBlog = Loadable({\n   loader: () => import('./Containers/Blog'),\n   loading: () => <div>Loading</div>\n})\n\nconst DynamicMainPage = Loadable({\n   loader: () => import('./Containers/MainPage'),\n   loading: () => <div>Loading</div>\n})\n\n\nclass MainRouter extends React.Component {\n\n   render() {\n      return (\n         <HashRouter>\n            <Switch>\n               <Route path='/'>\n                  <React.Fragment>\n                     <Menu />\n                     <Switch>\n                        <Route exact path='/' component={DynamicMainPage} />\n                        <Route exact path='/blog' component={DynamicBlog} />\n                        <Route path='*' component={DynamicNotFound} />\n                     </Switch>\n                  </React.Fragment>\n               </Route>\n            </Switch>\n         </HashRouter>\n      )\n   }\n}\n\nexport default MainRouter","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport MainRouter from './routes'\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './style.css'\nimport ReactGA from 'react-ga';\nReactGA.initialize('UA-127960781-1');\nReactGA.pageview(window.location.pathname + window.location.search);\n\nReactDOM.render(<MainRouter />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}