{"data":{"site":{"siteMetadata":{"title":"Martin Schnürer","author":"Martin Schnürer"}},"markdownRemark":{"id":"638b058e-1468-59f1-89eb-64c926d00e5a","excerpt":"In \n part one \nI showed you how to create a simple way to track your expenses.  In this part I am going to show you how you can make some sexi, beautiful and…","html":"<p>In\n<a href=\"/simple-and-effective-way-of-tracking-expenses\">part one</a>\nI showed you how to create a simple way to track your expenses. </p>\n<p>In this part I am going to show you how you can make some sexi, beautiful and useful charts.\nOne of the chart we would like to see is how much money we spent on a given categories\n(present in the form - transport, free time, restaurants etc.)</p>\n<p><strong>Table of content:</strong></p>\n<ol>\n<li><a href=\"#simple_chart\">Simple chart</a></li>\n<li>\n<p><a href=\"#advanced_chart\">Queried chart (Advanced)</a></p>\n<ul>\n<li><a href=\"#aggregation\">Aggregation explanation</a></li>\n</ul>\n</li>\n<li><a href=\"#another_types\">List of possible queries and charts</a></li>\n<li><a href=\"#conclusion\">Conclusion</a></li>\n</ol>\n<p><img src=\"https://images.unsplash.com/photo-1427751840561-9852520f8ce8?ixlib=rb-1.2.1&#x26;ixid=eyJhcHBfaWQiOjEyMDd9&#x26;auto=format&#x26;fit=crop&#x26;w=1655&#x26;q=80\" alt=\"stastistic man\"></p>\n<p><a name=\"simple_chart\"></a></p>\n<h1>Simple chart (barchart)</h1>\n<p>If you haven’t created your response sheet yet, I highly recommend to read the <a href=\"/simple-and-effective-way-of-tracking-expenses\">first part</a>.\nThis sheet is generated through <em>Forms responses</em> section. However, if you have another source of data imported to the sheet, you can skip the first part.\nOpen your sheet file and insert a blank chart. Next you have to choose the type of the chart.\nFor this type of data we choose <em>Pie chart</em> to see simply proportions where your money goes the most time.</p>\n<p>See gif below.</p>\n<p><img src=\"/choose_chart_2-16a5c9aa9300fd427660cac772448602.gif\" alt=\"choosing chart\"></p>\n<p>Now choose the data ranges. Labels and values. First you need to specify data range. In this case, you need to choose\ntwo columns, <em>B</em> to the end - which is value, and <em>D</em> which is type -> label. We set the B2:B100 to cover 100 next data rows in the table, and D2:D100. We also aggregate all values by value D. Aggregation is the sum of the values by the same label naming. In this case, you can see that <em>Transportation</em> in the Pie diagram will be summed up. For next types of charts and views you gonna need some more information about aggregation - read further.</p>\n<p><img src=\"/input_data_1-62b738791380c61e92a31d0aa14639fb.gif\" alt=\"choose data\"></p>\n<p><a name=\"advanced_chart\"></a></p>\n<h1>Advanced types of charts</h1>\n<p>Let’s say you want to know how much money you spent in the given month or year. For this type of data we choose another approach. Google Sheet allow write QUERY for some range of data. QUERY is very similar to the SQL.\nIf you have never heard about SQL, please google it.\nBasically it is query language to get, update or delete some data. In this case, however we are going to select (get) data. </p>\n<p><strong>Warning</strong>: Google Sheet QUERY doesn’t have “FROM” clause.</p>\n<p>For more information see <a href=\"https://support.google.com/docs/answer/3093343?hl=en\">this</a></p>\n<p>To see syntax of Google Sheet Query Language see <a href=\"https://developers.google.com/chart/interactive/docs/querylanguage\">this</a></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">=QUERY(\n   data,\n   query,\n   headers\n)</code></pre></div>\n<ul>\n<li><em>data</em> [Range]: Range of your data from sheet where the query will operate on.</li>\n<li><em>query</em> [String]: Your query</li>\n<li><em>headers</em> [Number]: Optional, the number of rows under the actual row where the function inserts the result of your query </li>\n</ul>\n<p>If you are programmer, from now you probably know how to continue further. If you are normal person, you have probably no clue what I am talking about. You can ask, why I am explaining things about query function. Well, that’s because we need to transform the data a little bit. Let’s say we want to know how much money you spent over last months, or how money items (transaction) have you done through past months. Now you can’t just select some columns, create chart and you done - you are not done (like in the section described above), because you don’t have right data to create this type of charts.</p>\n<p><a name=\"aggregation\"></a></p>\n<h2>Aggregation</h2>\n<p>Imagine aggregation as throwing items to the buckets. Every bucket has a label (or name) and it’s inner value. When you make aggregation, you also <strong><em>grouping</em></strong> your data with some function. The most popular aggregation functions are <em>SUM</em>, <em>COUNT</em>, <em>AVG</em>, <em>MAX</em>, <em>MIN</em>. When you throw an item to the bucket, the aggregation function is used on the item in the context of bucket where the item was assigned/thrown. Name of the function should actually tell you what it is supposed to do. If not, look at the reference <a href=\"https://developers.google.com/chart/interactive/docs/querylanguage#aggregation-functions\">here</a>. Then, you iterate over your specified data and search for <strong>specific value</strong>. If this value is the naming of your bucket, throw this iterated row into the bucket. In real-world example, the <strong>specific value</strong> is <code class=\"language-text\">SELECT name GROUP BY specific_value</code>. Now if you find next row with the same value you throw it to the same bucket again. Okay, now you finished iterating over the rows and you have bunch of buckets with a rows in it. </p>\n<p>Let’s say you have a car shop. You sell several brands of cars (Toyota, BMW, …). You’ve got records of your sold cars - time, car brand, and the price you have sold the car. Now you want to know the total count of every sold brand.</p>\n<p>Like so:\nToyota - 15 cars, BMW - 8 cars, …</p>\n<table>\n<thead>\n<tr>\n<th>brand</th>\n<th>count</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Toyota</td>\n<td>15</td>\n</tr>\n<tr>\n<td>BMW</td>\n<td>8</td>\n</tr>\n</tbody>\n</table>\n<p>The query for these type of problem would look like this:</p>\n<p>SELECT brand, COUNT(*) FROM database GROUP BY brand</p>\n<p>Or you want total money purchased for the sold cars - you can do it because you saved the price in your database.</p>\n<table>\n<thead>\n<tr>\n<th>brand</th>\n<th>sum</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Toyota</td>\n<td>89325</td>\n</tr>\n<tr>\n<td>BMW</td>\n<td>124140</td>\n</tr>\n</tbody>\n</table>\n<p>The query would look like this</p>\n<p>SELECT brand, SUM(*) FROM database GROUP BY brand</p>\n<p>If you look closer, only aggregation function changed from the previous query. Because bucket throwing mechanism remains the same, the final aggregation function is different.</p>\n<div class=\"warning\">\nWarning: This bucket mechanism I am describing here function as a small help for you to better imagine what is going on.\nRDBMS systems don't do that like this, they do a lot of optimizations and make things as they iterate over the rows and so on.\n</div>\n<p>If you still have problems with understanding aggregation, see this <a href=\"https://www.tutorialspoint.com/sql/sql-group-by.htm\">link</a></p>\n<h1>You need another column</h1>\n<p>I told you we are going to calculate our expenses over the past months so I suppose you imagine the result table (from which we create our final chart) somehow like this:</p>\n<table>\n<thead>\n<tr>\n<th>Month</th>\n<th>Sum</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Jan 2018</td>\n<td>150</td>\n</tr>\n<tr>\n<td>Feb 2018</td>\n<td>370</td>\n</tr>\n<tr>\n<td>Mar 2018</td>\n<td>210</td>\n</tr>\n<tr>\n<td>…</td>\n<td>…</td>\n</tr>\n</tbody>\n</table>\n<p>Now we are running into a few problems:</p>\n<ol>\n<li>\n<p>We don’t have function, which returns format of the date like shown in the table above. (Now we have date like this = 03/03/2019 19:32:16)</p>\n<ul>\n<li>Solution: We can extract <em>Month</em> and <em>Year</em> from that field.</li>\n</ul>\n</li>\n<li>\n<p>Another problem is we don’t have name of that extracted month, but rather number of month from the beginning of the year.</p>\n<ul>\n<li>Solution: See below</li>\n</ul>\n</li>\n</ol>\n<p>There is no function for which returns you the name of the month based on a number. The solution is you define month names by yourself then you can reference to this namings with some value. So what you do is extract number of month from date and then look for the cell on the specified index (specified by month value).</p>\n<p>For example “2018-07-14T15:00:00.00Z”. Extracted month value would by 7. Then you feed this number to your function and get 7th row in which we have <em>Jul</em>. Now the <em>INDEX</em> function helps - you select column of your defined month names.</p>\n<p><img src=\"/naming_columns-7fcb31de91b272a95192e248709f1394.gif\" alt=\"renaming month\"></p>\n<p>Note: <em>$</em> sign before column and row is useful when you apply your formula on the other rows and you don’t want another formula values/ranges to slide - our defined month names are rock static and don’t slide :).</p>\n<p>For the consistency I would create another sheet named <em>Constants</em> and move the month namings there. If you didn’t know you can refer to the data in another sheets (bottom panel).</p>\n<p>The next step is to extract the Year from the timestamp.\n<code class=\"language-text\">=YEAR(A1)</code></p>\n<p>Now we have two more columns with month name and year. Now we want to concatenate these two values into\none column.</p>\n<p><em>Note: We could do the whole process within one formula, but for the sake of simplicity I chose this approach.</em></p>\n<p>In the third column, write</p>\n<p><code class=\"language-text\">=CONCAT(CONCAT(month_cell;&quot; &quot;); year_cell)</code></p>\n<p>replace “month_cell” and “year_cell” with your cells and slide the formula down to all rows.</p>\n<p><img src=\"/concatenating_month_year-80012045e89e62c70689cefa07a35a30.gif\" alt=\"concatenating month and year\"></p>\n<p><strong>Cool! now we have our label completed (bucket name for aggregation) and value (expense) in the second column. Time to make our first query</strong></p>\n<p>Select the cell where you write a query. After execution of the function, this cell will be top left corner of your new table (after query). For this time, you can select the sheet where you have your raw data but I highly recommend to not mix raw data, constants and charts into one sheet. First argument of the <em>QUERY</em> function is range of data which the query will operate on. In this case you want to select all columns from start to the end (end column is the column with concatenated month name and year). </p>\n<p>The next argument is query. This is the most tricky part, as the query will aggregate your data, it knows nothing about how the result rows should be ordered - and you want your result rows nicely sorted (Jan 2018, Feb 2018, Mar 2018 …). </p>\n<p>query = <strong>SELECT I, SUM(B), MIN(A) GROUP BY I ORDER BY MIN(A)</strong></p>\n<p>Breath in, breath out. This query will do the work. First we selected <em>Column I</em> where is our “Mar 2018” values saved. The next is <em>SUM(B)</em>, this is aggregation function over grouped bucket (same month). The next selected column is <em>MIN(A)</em>, this is tricky one - we want to select “some” datetime value from the bucket (month). But we need to tell the query which one row to choose (as soon as the query doesn’t know) - this value tells us how we have to sort the result set. <em>GROUP BY</em> is basically bucketing - it groups all rows into group with the same value I. So every row inside group has the same value. <em>ORDER BY MIN(A)</em> is ordering function - it orders the final result of the query by <em>MIN(A)</em> which is minimum date in every group. </p>\n<p><img src=\"/creating_query_2-3d7b182d52d881e21160693e3edb8c2a.gif\" alt=\"creating a query\"></p>\n<h2>Final step, show me the chart!</h2>\n<p>Okay. Now you can choose your chart (barchart), select ranges from result query and you got it.</p>\n<p><img src=\"/chart_from_query-54586bef28250352066c4e160937d728.gif\" alt=\"creating a chart\"></p>\n<p>And you got it. Your last months and expenses for these months :). I believe from now on you can play with these tools a little bit, customize the charts for your needs. In next section I am going to name some other types of queries you should consider to implement ;)</p>\n<p><a name=\"another_types\"></a></p>\n<h1>Another types of charts and views</h1>\n<ol>\n<li>Show hours of a day and sum of your money spent in the hour.</li>\n<li>Show hours of a day and count of transactions in the hour.</li>\n<li>Show me week (throughout whole dataset) and show me the days in a week and how much did you spend.</li>\n<li>Show me week, days in a week and count of transactions.</li>\n<li>Weeks in a year…(1..52)</li>\n<li>Days in a month (1..31)</li>\n<li>… You are creative, you can create one by yourself.</li>\n</ol>\n<p><a name=\"conclusion\"></a></p>\n<h1>Conclusion</h1>\n<p>I showed you how to make simple and advanced view and how to query your data. If you have any question, please comment below! If you see any imperfection (Nobody is perfect), please let me know in the comments and I can edit the text later - I give you credit :)</p>\n<p>The Google Sheet has thousands of functions, a lot of which I haven’t even used yet - try to play around a little bit and have fun! Thank you for being here.</p>","frontmatter":{"title":"Making stats from your gathered expenses data","date":"March 08, 2019","categories":["programming","personal"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/creating-statistics-from-your-expenses-data/","previous":{"excerpt":"Motivation If you are not interested in the story about my unsuccessful start jump  here As a student, self-financing person I had a lot of…","fields":{"slug":"/simple-and-effective-way-of-tracking-expenses/"},"frontmatter":{"date":"March 01, 2019","title":"Simple and effective way of tracking expenses","publish":null,"categories":["programming","personal"],"tags":["technology","finance","expense","money"]}},"next":{"excerpt":"Today at the work, I had a little trouble with refactoring our class components. The problem was our react frontend application was…","fields":{"slug":"/using-reselect-at-react-class-components/"},"frontmatter":{"date":"March 27, 2019","title":"Using reselect at React Class Components","publish":null,"categories":["react","programming"],"tags":null}}}}